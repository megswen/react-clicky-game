{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","clicker","props","handleOnClick","id","className","onClick","this","role","aria-label","style","backgroundImage","image","React","Component","Wrapper","Navbar","score","highScore","Footer","App","state","characters","currentCount","increaseScore","setState","resetScore","setHighScore","newHighScore","resetData","data","map","item","clicked","randomizeCards","people","i","length","j","Math","floor","random","temp","restartGame","selected","filter","index","key","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"w1EAsBeA,G,wNAlBXC,QAAU,WACN,EAAKC,MAAMC,cAAc,EAAKD,MAAME,K,uDAIpC,OACI,yBAAKC,UAAU,OAAOC,QAASC,KAAKN,SAChC,yBACIO,KAAK,MACLC,aAAW,aACXC,MAAO,CAAEC,gBAAgB,QAAD,OAAUJ,KAAKL,MAAMU,MAArB,OACxBP,UAAU,8B,GAZFQ,IAAMC,Y,aCInBC,MAJf,SAAiBb,GACf,OAAO,wCAAMG,UAAU,WAAcH,K,MCaxBc,MAdf,SAAgBd,GACZ,OACI,oCACI,yBAAKG,UAAU,wCACX,wBAAIA,UAAU,cAAd,8BACA,yBAAKA,UAAU,aACX,uBAAGA,UAAU,QAAQD,GAAG,SAAxB,UAAwCF,EAAMe,OAC9C,uBAAGZ,UAAU,YAAYD,GAAG,aAA5B,cAAoDF,EAAMgB,e,MCD/DC,MANf,WACE,OACE,4BAAQd,UAAU,sCAAlB,6BC0GWe,E,4MAtGbC,MAAQ,CACNC,aACAC,aAAc,EACdL,UAAW,G,EAObM,cAAgB,WACd,EAAKC,SAAS,CAAEF,aAAc,EAAKF,MAAME,aAAe,K,EAG1DG,WAAa,WACX,EAAKD,SAAS,CAAEF,aAAc,K,EAIhCI,aAAe,WACb,IAAIC,EAAe,EAAKP,MAAME,aAC1B,EAAKF,MAAME,aAAe,EAAKF,MAAMH,WACvC,EAAKO,SAAS,CAAEP,UAAWU,K,EAM/BC,UAAY,SAAAC,GACV,IAAMD,EAAYC,EAAKC,KAAI,SAAAC,GAAI,kCAAUA,GAAV,IAAgBC,SAAS,OACxD,OACE,EAAKR,SAAS,CAAEH,WAAYO,K,EAKhCK,eAAiB,WAGf,IAFA,IAAIC,EAAS,EAAKd,MAAMC,WACpBc,EAAID,EAAOE,OAAS,EACjBD,EAAI,GAAG,CACZ,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAOC,GACpBD,EAAOC,GAAKD,EAAOG,GACnBH,EAAOG,GAAKI,EACZN,IAEF,OAAOD,G,EAITQ,YAAc,WACZ,EAAKhB,eACL,EAAKD,aACL,EAAKQ,iBACL,EAAKL,UAAUP,I,EAIjBrB,QAAU,SAAAG,GACR,IAAMwC,EAAW,EAAKvB,MAAMC,WAAWuB,QAAO,SAAAvB,GAAU,OAAIA,EAAWlB,KAAOA,MACnD,IAAxBwC,EAAS,GAAGX,SACb,EAAKT,gBACL,EAAKU,iBACLU,EAAS,GAAGX,SAAU,GAEtB,EAAKU,e,mEA1DPpC,KAAK2B,mB,+BA8DG,IAAD,OACP,OACE,oCACA,kBAAC,EAAD,CACIjB,MAAOV,KAAKc,MAAME,aAClBL,UAAWX,KAAKc,MAAMH,YAExB,kBAAC,EAAD,KACE,yBAAKb,UAAU,4BACb,yBAAKA,UAAU,QACZE,KAAKc,MAAMC,WAAWS,KAAI,SAACT,EAAYwB,GACtC,OACE,yBAAK1C,GAAG,+CACN,kBAAC,EAAD,CACE2C,IAAKD,EACL1C,GAAIkB,EAAWlB,GACf4C,KAAM1B,EAAW0B,KACjBpC,MAAOU,EAAWV,MAClBqB,QAASX,EAAWW,QACpB9B,cAAe,EAAKF,iBAQlC,kBAAC,EAAD,W,GAjGUY,IAAMC,WCIJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.609fdbdd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nclass CharacterCard extends React.Component {\n    clicker = () => {\n        this.props.handleOnClick(this.props.id)\n    };\n\n    render() {\n        return (\n            <div className=\"card\" onClick={this.clicker}>\n                <div\n                    role=\"img\"\n                    aria-label=\"click item\"\n                    style={{ backgroundImage: `url(\"${this.props.image}\")` }}\n                    className=\"img-fluid card-image\"\n                />\n            </div>\n        );\n    };\n};\n  \nexport default CharacterCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return (\n        <>\n            <nav className=\"navbar navbar-expand-lg navbar-light\">\n                <h4 className=\"nav-header\">Freaks & Geeks Clicky Game</h4>\n                <div className=\"score-box\">\n                    <p className=\"score\" id=\"score\">Score: {props.score}</p>\n                    <p className=\"top-score\" id=\"top-score\">Top Score: {props.highScore}</p>\n                </div>\n            </nav>\n        </>\n    );\n};\n  \nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer container-fluid text-center\">Created by Megan Swenson</footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport CharacterCard from \"./components/CharacterCard\";\nimport characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\n\nclass App extends React.Component {\n  state = {\n    characters,\n    currentCount: 0,\n    highScore: 0\n  }\n \n  componentWillMount() {\n    this.randomizeCards();\n  }\n\n  increaseScore = () => {\n    this.setState({ currentCount: this.state.currentCount + 1 })\n  }\n\n  resetScore = () => {\n    this.setState({ currentCount: 0 })\n  }\n\n  // Function to change highScore state to highest score\n  setHighScore = () => {\n    let newHighScore = this.state.currentCount;\n    if (this.state.currentCount > this.state.highScore) {\n      this.setState({ highScore: newHighScore })\n      //this.restartGame();\n    }\n  }\n\n  // Function to reset characters clicked to false\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return (\n      this.setState({ characters: resetData })\n    );\n  };\n\n  // Function to randomize rendered characters\n  randomizeCards = () => {\n    let people = this.state.characters;\n    let i = people.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = people[i];\n      people[i] = people[j];\n      people[j] = temp;\n      i--;\n    }\n    return people;\n  }\n  \n  // Function to restart the game\n  restartGame = () => { \n    this.setHighScore();\n    this.resetScore();\n    this.randomizeCards();\n    this.resetData(characters);\n  }\n\n  // Function to increase score when a new character is clicked, or reset the score to 0 and update the top score if a character is clicked twice\n  clicker = id => {\n    const selected = this.state.characters.filter(characters => characters.id === id);\n    if(selected[0].clicked === false) {\n      this.increaseScore();\n      this.randomizeCards();\n      selected[0].clicked = true;\n    } else {\n      this.restartGame();\n    }\n  };\n\n  render() {\n    return (\n      <>\n      <Navbar \n          score={this.state.currentCount}\n          highScore={this.state.highScore}\n        />\n        <Wrapper>\n          <div className=\"card-container ml-5 mr-5\">\n            <div className=\"row \">\n              {this.state.characters.map((characters, index) => {\n                return (\n                  <div id='cardItem col-lg-12 center-block text-center'>\n                    <CharacterCard \n                      key={index}\n                      id={characters.id}\n                      name={characters.name}\n                      image={characters.image} \n                      clicked={characters.clicked}\n                      handleOnClick={this.clicker}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </Wrapper>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}